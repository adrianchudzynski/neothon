class Neothon {
	constructor(config) {
		this.developer = ['neoshinlive'];
		this.setProperties(config);
		this.renderWidget();
		this.initWidget();
	}

	// ********** INITIALIZATION **********
	setProperties(config) {
		// States
		this.config = config;
		this.pausedTimeRemaining = 0;
		this.endTime = new Date();
		this.updateInterval = setInterval(this.update.bind(this), 1000);
		this.paused = false;
		this.ended = false;
		this.notificationQueue = [];
		this.isAnimating = false;

		// Commands
		this.commands = [
			{
				'command': 'addhours',
				'alias': ['addh'],
				'function': this.addHours.bind(this),
				'permissionFieldPrefix': 'addTime',
				'response': '{name} added {hours} hours to the countdown.'
			},
			{
				'command': 'addminutes',
				'alias': ['addmin', 'addm', 'addtime'],
				'function': this.addMinutes.bind(this),
				'permissionFieldPrefix': 'addTime',
				'response': '{name} added {minutes} minutes to the countdown.'
			},
			{
				'command': 'addseconds',
				'alias': ['addsec', 'adds'],
				'function': this.addSeconds.bind(this),
				'permissionFieldPrefix': 'addTime',
				'response': '{name} added {seconds} seconds to the countdown.'
			},
			{
				'command': 'settime',
				'alias': ['setminutes', 'setmin', 'setm'],
				'function': this.setTime.bind(this),
				'permissionFieldPrefix': 'setTime',
				'response': '{name} set the countdown to {minutes} minutes.',
			},
			{
				'command': 'pause',
				'alias': [],
				'function': this.pause.bind(this),
				'permissionFieldPrefix': 'toggleCountdown',
				'response': 'Countdown paused!'
			},
			{
				'command': 'resume',
				'alias': [],
				'function': this.resume.bind(this),
				'permissionFieldPrefix': 'toggleCountdown',
				'response': 'Countdown resumed!'
			},
			{
				'command': 'toggledays',
				'alias': ['toggled'],
				'function': this.toggleDays.bind(this),
				'permissionFieldPrefix': 'toggleDays',
				'response': '{name} {state} days in countdown.'
			},
		];

		// Elements
		this.widget = null;
		this.countdownContent = null;
		this.notificationContent = null;
	}

	renderWidget() {
		// Scripts
		const jQuery = document.createElement('script');
		jQuery.src = 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js';
		jQuery.integrity = 'sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==';
		jQuery.crossOrigin = 'anonymous';
		jQuery.referrerPolicy = 'no-referrer';

		const GSAP = document.createElement('script');
		GSAP.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js';
		GSAP.integrity = 'sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg==';
		GSAP.crossOrigin = 'anonymous';
		GSAP.referrerPolicy = 'no-referrer';

		const JS = [jQuery, GSAP];

		// Styles
		const googleFont = document.createElement('link');
		googleFont.rel = 'stylesheet';
		googleFont.href = `https://fonts.googleapis.com/css2?family=${this.config.fontName}:wght@100;200;300;400;500;600;700;800;900&display=swap`;
		
		const CSS = [googleFont];

		// HTML
		const HTML = document.createElement('div');
		HTML.innerHTML = '<div id="neothon"><div id="notification"></div><div id="countdown"></div></div>';

		CSS.forEach(style => document.head.appendChild(style));
		document.body.appendChild(HTML);
		JS.forEach(script => document.body.appendChild(script));

		this.widget = $('#neothon');
		this.countdownContent = this.widget.find('#countdown');
		this.notificationContent = this.widget.find('#notification');

		this.widget.css({
			'font-family': `'${this.config.fontName}', sans-serif`,
			'font-weight': 'bold',
			'color': `${this.config.countdownColor}`,
			'display': 'flex',
			'flex-direction': 'column',
			'align-items': 'flex-end',
			'justify-content': 'center',
			'text-align': 'right',
			'line-height': '1',
			'padding': '16px',
			'text-shadow': `0px 3px 6px ${this.config.textShadowColor}`,
		});
		this.countdownContent.css({
			'font-size': '128px',
		});
		this.notificationContent.css({
			'font-size': '52px',
			'min-height': '64px',
			'margin-bottom': '8px',
			'display': 'flex',
			'align-items': 'center',
			'justify-content': 'center',
		});
	}

	initWidget() {
		this.setTime({ minutes: this.config.startTime });
	}

	// ********** LIVECYCLE **********
	update(force = false) {
		if (this.paused && !force) return;

		const now = new Date();
		const timeDifference = this.endTime - now;

		if (timeDifference <= 0) {
			this.ended = true;
			clearInterval(this.updateInterval);
			this.showNotification(this.config.endText, false);
			return;
		}

		const days = this.getDays(timeDifference);
		const hours = this.padZero(this.getHours(timeDifference));
		const minutes = this.padZero(this.getMinutes(timeDifference));
		const seconds = this.padZero(this.getSeconds(timeDifference));

		const timeFormat = this.config.timeFormat || '{hours}:{minutes}:{seconds}';
		const timePlaceholders = {
			'hours': `<span id="hours" class="digit">${hours}</span>`,
			'minutes': `<span id="minutes" class="digit">${minutes}</span>`,
			'seconds': `<span id="seconds" class="digit">${seconds}</span>`,
		};

		let content = this.getContentFromPlaceholders(timeFormat, timePlaceholders);

		if (this.config.showDays && days > 0) {
			const dayPlaceholders = { 'days': `<span id="days" class="digit">${days}</span>` };
			const dayContent = this.getContentFromPlaceholders(this.config.dayFormat, dayPlaceholders);

			content = `${dayContent} ${content}`;
		}

		this.countdownContent.html(content);
	}

	showNotification(content, animate = true) {
		this.notificationQueue.push({ content, animate });

		if (this.isAnimating) return;
	
		this.processNotificationQueue();

		this.notificationContent.html(content);
	}

	processNotificationQueue() {
		if (this.notificationQueue.length < 1) return;
	
		const { content, animate } = this.notificationQueue.shift();
	
		this.notificationContent.html(content);
	
		if (animate) {
			this.isAnimating = true;
	
			const timeline = gsap.timeline({
				onComplete: () => {
					// Animation is finished, set flag to false and process next notification
					this.isAnimating = false;
					this.processNotificationQueue();
				}
			});
	
			timeline.fromTo(this.notificationContent, { opacity: 0, y: 20 }, { opacity: 1, y: 0, duration: 0.8 })
				.to({}, { duration: 5 })
				.to(this.notificationContent, { opacity: 0, y: -20, duration: 0.8 });
		}
	}

	runCommand(data, skipPermissionCheck = false) {		
		const { event, command } = data;
		const commandObj = this.commands.find(c => c.command === command.name || c.alias.includes(command.name));

		if (!commandObj) return;

		const allowMods = this.config[commandObj.permissionFieldPrefix + 'AllowMods'];
		const allowedRoles = allowMods ? ['broadcaster', 'moderator'] : ['broadcaster'];
		const allowedUsersField = this.config[commandObj.permissionFieldPrefix + 'AllowUsers'];
		const allowedUsers = this.developer;

		// Add allowed users from field and add developer to allowed users
		if (allowedUsersField) {
			const users = allowedUsersField.split(',').map(u => u.trim().toLowerCase());

			allowedUsers.push(...users);
		}

		const isPermitted = skipPermissionCheck || 
			event.badges.some(role => allowedRoles.includes(role.type)) || 
			allowedUsers.includes(event.nick);

		if (isPermitted) {
			commandObj.function({ name: event.displayName, 'commandObj': commandObj, ...command.args });
		} else {
			// @todo: Add response to chat
		}
	}

	// ********** COMMANDS **********
	pause(args) {
		if (this.paused) return;

		this.paused = true;
		this.pausedTimeRemaining = this.endTime - new Date();
		this.showNotification(args.commandObj.response);

		return false;
	}

	resume(args) {
		if (!this.paused) return;

		this.paused = false;
		this.endTime = new Date(Date.now() + this.pausedTimeRemaining);
		this.showNotification(args.commandObj.response);

		return false;
	}

	addHours(args) {
		const hoursToAdd = Math.max(parseInt(args.hours), 1);

		if (isNaN(hoursToAdd)) return;

		if (this.paused) {
			this.pausedTimeRemaining += hoursToAdd * 60 * 60 * 1000;
			this.endTime = new Date(Date.now() + this.pausedTimeRemaining)
		} else {
			this.endTime.setHours(this.endTime.getHours() + hoursToAdd);
		}

		this.update(true);

		const content = this.getNotificationContentHTML(args.name, this.shortenNumber(hoursToAdd * 60 * 60));
		this.showNotification(content);

		if (args.commandObj && args.commandObj.response) {
			const response = this.getContentFromPlaceholders(args.commandObj.response, { 'hours': hoursToAdd });

			// @todo Add response to chat
		}
	}

	addMinutes(args) {
		const minutesToAdd = Math.max(parseInt(args.minutes), 1);

		if (isNaN(minutesToAdd)) return;

		if (this.paused) {
			this.pausedTimeRemaining += minutesToAdd * 60 * 1000;
			this.endTime = new Date(Date.now() + this.pausedTimeRemaining)
		} else {
			this.endTime.setMinutes(this.endTime.getMinutes() + minutesToAdd);
		}

		this.update(true);

		const content = this.getNotificationContentHTML(args.name, this.shortenNumber(minutesToAdd * 60));
		this.showNotification(content);

		if (args.commandObj && args.commandObj.response) {
			const response = this.getContentFromPlaceholders(args.commandObj.response, { 'minutes': minutesToAdd });

			// @todo Add response to chat
		}
	}

	addSeconds(args) {
		const secondsToAdd = Math.max(parseInt(args.seconds), 1);

		if (isNaN(secondsToAdd)) return;

		if (this.paused) {
			this.pausedTimeRemaining += secondsToAdd * 1000;
			this.endTime = new Date(Date.now() + this.pausedTimeRemaining)
		} else {
			this.endTime.setSeconds(this.endTime.getSeconds() + secondsToAdd);
		}

		this.update(true);

		const content = this.getNotificationContentHTML(args.name, this.shortenNumber(secondsToAdd));
		this.showNotification(content);

		if (args.commandObj && args.commandObj.response) {
			const response = this.getContentFromPlaceholders(args.commandObj.response, { 'seconds': secondsToAdd });

			// @todo Add response to chat
		}
	}

	setTime(args) {
		const minutesToSet = parseInt(args.minutes);

		if (isNaN(minutesToSet)) return;

		this.pausedTimeRemaining = minutesToSet * 60 * 1000;
		this.endTime = new Date(Date.now() + this.pausedTimeRemaining);

		this.update(true);

		if (args.commandObj && args.commandObj.response) {
			const response = this.getContentFromPlaceholders(args.commandObj.response, { 'minutes': minutesToSet });

			// @todo Add response to chat
		}
	}

	toggleDays(args) {
		this.config.showDays = !this.config.showDays;

		this.update(true);

		if (args.commandObj && args.commandObj.response) {
			const response = this.getContentFromPlaceholders(args.commandObj.response, { 'state': this.config.showDays ? 'enabled' : 'disabled' });

			// @todo Add response to chat
		}
	}

	// ********** UTILS **********
	getDays(time) {
		return Math.floor(time / (1000 * 60 * 60 * 24));
	}

	getHours(time) {
		const totalHours = time / (1000 * 60 * 60);
		const hours = this.config.showDays && this.getDays(time) > 0 ? totalHours % 24 : totalHours;

		return Math.floor(hours);
	}

	getMinutes(time) {
		return Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));
	}

	getSeconds(time) {
		return Math.floor((time % (1000 * 60)) / 1000);
	}

	getContentFromPlaceholders(content, placeholders) {
		for (const [key, value] of Object.entries(placeholders)) {
			const template = new RegExp(`{${key}}`, 'g');
			content = content.replace(template, value);
		}
	
		return content;
	}

	shortenNumber(number) {
		if (number >= 1000) {
			const abbreviated = Math.floor(number / 1000);
			const remainder = number % 1000;
			return remainder === 0 ? abbreviated + 'k' : abbreviated + ',' + Math.floor(remainder / 100) + 'k';
		}
	
		return number.toString();
	}

	padZero(value) {
		return value < 10 ? `0${value}` : value;
	}

	getNotificationContentHTML(name, amount) {
		const amountStyle = `
			font-size: 32px;
			color: ${this.config.amountColor};
			background-color: ${this.config.amountBackgroundColor};
			border-radius: ${this.config.amountBorderRadius}px;
			padding: 0 16px;
			margin-left: 16px;
			margin-top: 8px;
			padding: 12px 16px;
			text-shadow: 0px 2px 4px ${this.config.textShadowColor};
		`;

		return `<span style="color:${this.config.nameColor}">${name}</span><span style="${amountStyle.trim()}">+${amount} <span style="font-size:28px">sec</span></span>`;
	}
}

let neothon;

window.addEventListener('onWidgetLoad', function (obj) {
	neothon = new Neothon(obj.detail.fieldData);
});

window.addEventListener('onEventReceived', function (obj) {
	if (neothon.ended) return;

	const type = obj.detail.listener;
	const event = obj.detail.event;

	const data = {
		event: event.data,
		command: {
			name: '',
			args: []
		}
	};

	switch (type) {
		case 'message':
			if (event.data.text.startsWith('!')) {
				data.command.args = event.data.text.split(' ');
				data.command.name = data.command.args.shift().substr(1).toLowerCase();
		
				neothon.runCommand(data);
			}
			break;
		case 'subscriber-latest':
			if (!neothon.config.enableSubs || (event.hasOwnProperty('isCommunityGift') && event.isCommunityGift)) break;

			const tier = event.tier === 'prime' ? 1 : Math.floor(event.tier / 1000);
			const fieldName = `t${tier}SubValue`;
			var secondsPerUnit = neothon.config[fieldName];

			if (secondsPerUnit < 1) break;

			var seconds = secondsPerUnit;
			let name = event.name;

			if (event.hasOwnProperty('gifted') && event.gifted) {
				name = event.sender;
			}

			if (event.hasOwnProperty('bulkGifted') && event.bulkGifted) {
				name = event.sender;
				seconds = secondsPerUnit * event.amount;
			}

			neothon.addSeconds({ name, seconds });
			break;
		case 'cheer-latest':
			var secondsPerUnit = neothon.config.cheerValue;

			if (!neothon.config.enableCheers || secondsPerUnit < 1 || event.amount < 100) break;

			var seconds = secondsPerUnit * Math.floor(event.amount / 100);
			
			neothon.addSeconds({ name: event.name, seconds });
			break;
		case 'tip-latest':
			var secondsPerUnit = neothon.config.tipValue;

			if (!neothon.config.enableTips || secondsPerUnit < 1 || event.amount < 1) break;

			var seconds = secondsPerUnit * Math.floor(event.amount);
			
			neothon.addSeconds({ name: event.name, seconds });
			break;
		case 'follower-latest':
			if (!neothon.config.enableFollower) break;

			var seconds = neothon.config.followerValue;

			neothon.addSeconds({ name: event.name, seconds });
			break;
		case 'raid-latest':
			var secondsPerUnit = neothon.config.raidValue;

			if (!neothon.config.enableRaids || secondsPerUnit < 1 || event.amount < 1) break;

			var seconds = secondsPerUnit * event.amount;
			
			neothon.addSeconds({ name: event.name, seconds });
			break;
	}
});
